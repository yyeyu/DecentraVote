from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram import F
from keyboards.creating_keyboards import (
    get_start_keyboard,
    get_add_options_keyboard,
    get_multiple_choice_keyboard,
    get_cancel_keyboard,
    get_finish_keyboard
)
from aiogram.fsm.context import FSMContext
from FSM.creating_states import VotingCreation
import re
from datetime import datetime

DATE_TIME_PATTERN = re.compile(r'^\d{2}:\d{2} \d{2}\.\d{2}\.\d{4}$')

router = Router()

@router.callback_query(F.data == "cancel_voting")
async def cancel_voting(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
async def create_voting(message: Message, state: FSMContext):
    await state.clear()
    await state.set_data({"question": "", "options": [], "multiple_choice": False})
    await message.answer(
        "üó≥Ô∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "start_voting_creation")
async def start_voting_creation(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
        reply_markup=None
    )
    await state.set_state(VotingCreation.waiting_for_question)

@router.message(VotingCreation.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.")
        return
    
    if len(message.text) > 256:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 256 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(question=message.text)
    await message.answer(
        f"‚ùì –í–æ–ø—Ä–æ—Å: <b>{message.text}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=get_add_options_keyboard()
    )
    await state.set_state(VotingCreation.waiting_add_for_options)

@router.callback_query(F.data == "add_option", VotingCreation.waiting_add_for_options)
async def add_option(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:"
    )

@router.message(VotingCreation.waiting_add_for_options)
async def process_option(message: Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("‚ùå –í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–Ω–æ–≤–∞.")
        return
    
    data = await state.get_data()
    options = data.get("options", [])

    if len(options) >= 10:
        await message.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 80 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    if len(message.text) > 100:
        await message.answer("‚ùå –í–∞—Ä–∏–∞–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    options.append(message.text)
    await state.update_data(options=options)

    formatted_options = "\n".join([f"{i+1}) {option}" for i, option in enumerate(options)])
    
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç: <b>{message.text}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{formatted_options}",
        reply_markup=get_add_options_keyboard()
    )

@router.callback_query(F.data == "finish_options")
async def finish_options(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üî¢ –†–∞–∑—Ä–µ—à–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä?",
        reply_markup=get_multiple_choice_keyboard()
    )
    await state.set_state(VotingCreation.waiting_for_multiple_choice)

@router.callback_query(VotingCreation.waiting_for_multiple_choice)
async def process_multiple_choice(callback_query: CallbackQuery, state: FSMContext):
    multiple_choice = callback_query.data.split("_")[-1] == "yes"
    await state.update_data(multiple_choice=multiple_choice)
    await callback_query.message.edit_text(
        f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {'–î–∞' if multiple_choice else '–ù–µ—Ç'}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):",
        reply_markup=None
    )
    await state.set_state(VotingCreation.waiting_for_start_time)

@router.message(VotingCreation.waiting_for_start_time)
async def process_start_time(message: Message, state: FSMContext):
    user_input = message.text.strip()

    if not DATE_TIME_PATTERN.match(user_input):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>15:30 25.12.2026</code>",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    try:
        start_time = datetime.strptime(user_input, "%H:%M %d.%m.%Y")
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏!\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if start_time < datetime.now():
        await message.answer(
            "‚ùå –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(start_time=user_input)
    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {user_input}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–≤ —á–∞—Å–∞—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(VotingCreation.waiting_for_duration)

@router.message(VotingCreation.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError as e:
        await message.answer(f"‚ùå {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(duration=int(message.text))
    data = await state.get_data()
    await message.answer(
        f"üó≥Ô∏è <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
        f"–í–æ–ø—Ä–æ—Å: {data['question']}\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(data['options'])}\n"
        f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {'–î–∞' if data['multiple_choice'] else '–ù–µ—Ç'}\n"
        f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data['start_time']}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} —á–∞—Å–∞(–æ–≤)",
        reply_markup=get_finish_keyboard()
    )
    await state.set_state(VotingCreation.waiting_for_confirmation)

@router.callback_query(F.data == "confirm_voting")
async def confirm_voting(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!"
    )
    await state.clear()

@router.callback_query(F.data == "cancel_voting")
async def cancel_voting(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    await state.clear()