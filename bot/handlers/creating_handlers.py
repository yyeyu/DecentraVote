from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram import F
from keyboards.creating_keyboards import (
    get_start_keyboard,
    get_add_options_keyboard,
    get_multiple_choice_keyboard,
    get_cancel_keyboard,
    get_finish_keyboard
)
from aiogram.fsm.context import FSMContext
from FSM.states import VotingCreation
import re
from datetime import datetime
from aiogram.filters import StateFilter
from dotenv import load_dotenv
from blockchain.voting_service import *
import html

load_dotenv()

RPC_URL = os.getenv("RPC_URL")
CONTRACT_ADDRESS = os.getenv("CONTRACT_ADDRESS")
SECRET_KEY = os.getenv("SECRET_KEY")
ADMIN_KEY = os.getenv("ADMIN_KEY")
module_dir = os.path.dirname(__file__)
project_root = os.path.abspath(os.path.join(module_dir, "..", ".."))
ABI_PATH = os.path.join(project_root, "blockchain", "contracts", "ContractABI.json")
DATE_TIME_PATTERN = re.compile(r'^\d{2}:\d{2} \d{2}\.\d{2}\.\d{4}$')

router = Router()

@router.callback_query(F.data == "cancel_voting")
async def cancel_voting(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
async def create_voting(message: Message, state: FSMContext):
    await state.clear()
    await state.set_data({"question": "", "options": [], "multiple_choice": False})
    await message.answer(
        "üó≥Ô∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "start_voting_creation")
async def start_voting_creation(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
        reply_markup=None
    )
    await state.set_state(VotingCreation.waiting_for_question)

@router.message(VotingCreation.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.")
        return
    
    if len(message.text) > 256:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 256 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(question=message.text)
    await message.answer(
        f"‚ùì –í–æ–ø—Ä–æ—Å: <b>{message.text}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=get_add_options_keyboard()
    )
    await state.set_state(VotingCreation.waiting_add_for_options)

@router.callback_query(F.data == "add_option", VotingCreation.waiting_add_for_options)
async def add_option(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:"
    )

@router.message(VotingCreation.waiting_add_for_options)
async def process_option(message: Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("‚ùå –í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–Ω–æ–≤–∞.")
        return
    
    data = await state.get_data()
    options = data.get("options", [])

    if len(options) >= 16:
        await message.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 16 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    if len(message.text) > 100:
        await message.answer("‚ùå –í–∞—Ä–∏–∞–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    options.append(message.text)
    await state.update_data(options=options)

    formatted_options = "\n".join([f"{i+1}) {option}" for i, option in enumerate(options)])
    
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç: <b>{message.text}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{formatted_options}",
        reply_markup=get_add_options_keyboard()
    )

@router.callback_query(F.data == "finish_options")
async def finish_options(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üî¢ –†–∞–∑—Ä–µ—à–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä?",
        reply_markup=get_multiple_choice_keyboard()
    )
    await state.set_state(VotingCreation.waiting_for_multiple_choice)

@router.callback_query(VotingCreation.waiting_for_multiple_choice)
async def process_multiple_choice(callback_query: CallbackQuery, state: FSMContext):
    multiple_choice = callback_query.data.split("_")[-1] == "yes"
    await state.update_data(multiple_choice=multiple_choice)
    await callback_query.message.edit_text(
        f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {'–î–∞' if multiple_choice else '–ù–µ—Ç'}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì):\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ 1-2 –º–∏–Ω—É—Ç—ã –ø–æ–∑–∂–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=None
    )
    await state.set_state(VotingCreation.waiting_for_start_time)

@router.message(VotingCreation.waiting_for_start_time)
async def process_start_time(message: Message, state: FSMContext):
    user_input = message.text.strip()

    if not DATE_TIME_PATTERN.match(user_input):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>15:30 25.12.2026</code>",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    try:
        start_time = datetime.strptime(user_input, "%H:%M %d.%m.%Y")
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏!\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if start_time < datetime.now():
        await message.answer(
            "‚ùå –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(start_time=user_input)
    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {user_input}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(VotingCreation.waiting_for_duration)

@router.message(VotingCreation.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    try:
        duration_minutes = int(message.text.strip())
        
        if duration_minutes < 1:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 1 –º–∏–Ω—É—Ç–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=None
            )
            return
            
        if duration_minutes > 525600:
            await message.answer(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 525600 –º–∏–Ω—É—Ç (365 –¥–Ω–µ–π)\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=None
            )
            return

        duration_seconds = duration_minutes * 60
        await state.update_data({
            'duration': duration_minutes,  
            'duration_seconds': duration_seconds  
        })

        data = await state.get_data()
        
        days = duration_minutes // 1440
        hours = (duration_minutes % 1440) // 60
        minutes = duration_minutes % 60
        
        duration_display = []
        if days > 0:
            duration_display.append(f"{days} –¥–Ω.")
        if hours > 0:
            duration_display.append(f"{hours} —á.")
        if minutes > 0 or not duration_display:
            duration_display.append(f"{minutes} –º–∏–Ω.")
        
        await message.answer(
            f"üó≥Ô∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"‚Ä¢ –í–æ–ø—Ä–æ—Å: {data['question']}\n"
            f"‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(data['options'])}\n"
            f"‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {'–î–∞' if data['multiple_choice'] else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –ù–∞—á–∞–ª–æ: {data['start_time']}\n"
            f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {' '.join(duration_display)} ({duration_minutes} –º–∏–Ω—É—Ç)",
            reply_markup=get_finish_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(VotingCreation.waiting_for_confirmation)

    except ValueError:
        await message.answer(
            "‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–æ—Ç 1 –¥–æ 525600)\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 60 (1 —á–∞—Å)\n"
            "‚Ä¢ 1440 (1 –¥–µ–Ω—å)\n"
            "‚Ä¢ 10080 (1 –Ω–µ–¥–µ–ª—è)",
            reply_markup=None
        )

@router.callback_query(StateFilter(VotingCreation.waiting_for_confirmation), F.data == "confirm_voting")
async def confirm_voting(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω‚Ä¶\n–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-30 —Å–µ–∫—É–Ω–¥.")

    data = await state.get_data()
    
    try:
        voting_service = VotingService(RPC_URL, CONTRACT_ADDRESS, ABI_PATH, SECRET_KEY, ADMIN_KEY)
        w3 = voting_service.w3

        required_fields = ['question', 'options', 'multiple_choice', 'start_time', 'duration_seconds']
        for field in required_fields:
            if field not in data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")

        question = data["question"]
        answers = data["options"]
        multiple_choices = bool(data["multiple_choice"])
        duration_seconds = int(data["duration_seconds"])
        raw_start_time = data["start_time"]
        
        parsed_time = datetime.strptime(raw_start_time, "%H:%M %d.%m.%Y")
        start_time = int(parsed_time.timestamp())

        current_block = w3.eth.get_block('latest')
        current_time = current_block.timestamp
        time_diff = start_time - current_time

        if time_diff <= 0:
            raise ValueError(
                f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º\n"
                f"‚Ä¢ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∞: {current_time} ({datetime.fromtimestamp(current_time)})\n"
                f"‚Ä¢ –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {start_time} ({datetime.fromtimestamp(start_time)})\n"
                f"‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {time_diff} —Å–µ–∫—É–Ω–¥"
            )

        tx_hash = voting_service.create_poll(
            question=question,
            answers=answers,
            multiple=multiple_choices,
            start=start_time,
            duration=duration_seconds
        )

        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        contract = voting_service.contract
        events = contract.events.PollCreated().process_receipt(tx_receipt)
        if not events:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ —Å–æ–±—ã—Ç–∏—è PollCreated.")
        poll_id = events[0]["args"]["id"]

        duration_minutes = duration_seconds // 60
        duration_hours = duration_minutes // 60
        duration_days = duration_hours // 24

        duration_str = []
        if duration_days > 0:
            duration_str.append(f"{duration_days} –¥.")
        if duration_hours % 24 > 0:
            duration_str.append(f"{duration_hours % 24} —á.")
        if duration_minutes % 60 > 0:
            duration_str.append(f"{duration_minutes % 60} –º–∏–Ω.")

        ETHERSCAN_BASE = "https://sepolia.etherscan.io"
        tx_hash_norm = f"0x{tx_hash}"
        tx_url = f"https://sepolia.etherscan.io/tx/{tx_hash_norm}"

        await callback_query.message.edit_text(
            f"‚úÖ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"‚ñ∏ –í–æ–ø—Ä–æ—Å: {html.escape(question)}\n"
            f"‚ñ∏ –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(html.escape(a) for a in answers)}\n"
            f"‚ñ∏ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {' '.join(duration_str)}\n"
            f"‚ñ∏ –ù–∞—á–∞–ª–æ: {parsed_time.strftime('%H:%M %d.%m.%Y')}\n"
            f"‚ñ∏ ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: <code>{poll_id}</code>\n\n"
            f"TX Hash: <a href=\"{tx_url}\"><code>{tx_hash_norm}</code></a>\n\n"
            f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª–µ: <a href=\"{tx_url}\">0x{tx_url}</a>",
            parse_mode="HTML",
            reply_markup=None,
            disable_web_page_preview=True
        )

    except ValueError as ve:
        await callback_query.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</b>\n{html.escape(str(ve))}",
            parse_mode="HTML"
        )
    except Exception as e:
        error_msg = f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>\n{html.escape(str(e))}"
        
        if hasattr(e, 'args') and e.args:
            error_details = "\n".join([html.escape(str(arg)) for arg in e.args if arg])
            if error_details:
                error_msg += f"\n\n<code>{error_details}</code>"
        
        await callback_query.message.edit_text(
            error_msg,
            parse_mode="HTML"
        )

    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_voting")
async def cancel_voting(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    await state.clear()